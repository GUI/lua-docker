#!/usr/bin/env ruby

require "erb"
require "fileutils"
require "json"
require "open-uri"
require "set"
require "time"

VERSION_CONSTRAINTS = {
  "lua" => Gem::Dependency.new("lua", ">= 5.0", ">= 5.0.pre"),
  "luajit" => Gem::Dependency.new("luajit", ">= 2.0", ">= 2.0.pre"),
}

VARIANTS = {
  "lua" => [
    ["luarocks"],
  ],
  "luajit" => [
    ["luarocks"],
    ["lua52compat"],
    ["lua52compat", "luarocks"],
  ],
}

DISTROS = [
  "debian",
  "alpine",
  "ubuntu",
]

FileUtils.rm_rf(Dir.glob("lua-*"))
FileUtils.rm_rf(Dir.glob("luajit-*"))

github_lua_image = "ghcr.io/gui/lua"
github_luajit_image = "ghcr.io/gui/luajit"
github_build_cache_repo = "ghcr.io/gui/lua-docker-build-cache"
docker_hub_lua_image = "nickblah/lua"
docker_hub_luajit_image = "nickblah/luajit"

versions = {
  "lua" => {},
  "luajit" => {},
}

distros = {}
DISTROS.each do |distro_name|
  library = URI.open("https://raw.githubusercontent.com/docker-library/official-images/master/library/#{distro_name}")
    .read
    .split(/[\r\n]{2,}/)
    .select { |lines| lines.include?("Tags:") }
    .map { |lines| Hash[lines.split(/[\r\n]/).map { |r| r.split(/:\s+/, 2) }] }
  library.each do |distro|
    distro_tags = distro.fetch("Tags").split(/,\s*/)
    distro_version_tags = distro_tags - ["latest"]

    case distro_name
    when "debian"
      if distro_tags.none? { |t| t =~ /^\d+$/ }
        next
      end

      distro_version_tags.reject! { |t| t =~ /^(\d+|testing|rc-buggy|oldstable|sid|stable|unstable|experimental|.*-backports|.*-slim)/ }
    when "ubuntu"
      if distro_tags.include?("devel")
        next
      end

      distro_version_tags.reject! { |t| t =~ /^(\d+)/ }
    when "alpine"
      distro_version_tags.reject! { |t| t =~ /^(edge|\d{8})/ }
    end

    distro_version_tags.sort_by! { |t| t.length }
    if distro_name == "alpine" && distro_version_tags.first =~ /^\d+$/
      major_version_tag = distro_version_tags.shift
    end
    distro_tag = distro_version_tags.last
    distro_version = distro_version_tags.first
    if distro_version
      distro_numeric_version = Gem::Version.new(distro_tags.sort_by { |t| t.length }.reverse.find { |t| t =~ /^([\d.]+)$/ })
      distros[distro_name] ||= []
      distros[distro_name] << {
        :distro_tag => distro_tag,
        :distro_version => distro_version,
        :distro_numeric_version => distro_numeric_version,
        :latest => distro_tags.include?("latest"),
        :major_version_tag => major_version_tag,
      }
    end
  end
end

distros.each do |distro, distro_versions|
  distro_versions.sort_by! { |v| v.fetch(:distro_numeric_version) }
  distro_versions.reverse!
  distros[distro] = distro_versions.take(2)
end

versions.keys.each do |lang|
  archive_versions = case lang
  when "lua"
    content = URI.open("https://www.lua.org/ftp/").read
    content += URI.open("https://www.lua.org/work/").read
    content.scan(/lua-([\d\.]+(?:-beta-rc\d+)?)\.tar\.gz/).flatten.compact.uniq
  when "luajit"
    data = JSON.parse(URI.open("https://api.github.com/repos/LuaJIT/LuaJIT/branches/v2.1").read)
    timestamp = Time.iso8601(data.fetch("commit").fetch("commit").fetch("committer").fetch("date")).to_i
    ["2.1.#{timestamp}"]
  end

  archive_versions.each do |version_full|
    version = Gem::Version.new(version_full)
    next unless VERSION_CONSTRAINTS.fetch(lang).match?(lang, version)

    version_major = version_full.match(/^(\d+)/)[1]
    version_minor = version_full.match(/^(\d+\.\d+)/)[1]
    version_name = version_minor
    case lang
    when "lua"
      version_name += "-beta-rc" if version.prerelease?
    when "luajit"
      version_name += "-beta" if version.prerelease?
    end

    if !versions[lang][version_name] || version > versions[lang][version_name].fetch(:version)
      case lang
      when "lua"
        filename = "lua-#{version_full}.tar.gz"
        archive_url = (version.prerelease?) ? "https://www.lua.org/work/#{filename}" : "https://www.lua.org/ftp/#{filename}"
        archive_sha = content.match(/href=.?[^>]*#{Regexp.escape(filename)}.*?<td class="sum">(\s*([a-f0-9]{64})|[^<]*sha1:\s*([a-f0-9]{40}))\b/im)[1]
        if archive_sha.length == 64
          archive_sha256 = archive_sha
        else
          archive_sha1 = archive_sha
        end
      when "luajit"
        filename = "LuaJIT-#{data.fetch("commit").fetch("sha")}.tar.gz"
        archive_url = "https://github.com/LuaJIT/LuaJIT/archive/#{data.fetch("commit").fetch("sha")}.tar.gz"
      end

      versions[lang][version_name] = {
        :lang => lang,
        :version => version,
        :version_name => version_name,
        :version_major => version_major,
        :version_minor => version_minor,
        :version_full => version_full,
        :archive_url => archive_url,
        :archive_sha1 => archive_sha1,
        :archive_sha256 => archive_sha256,
      }
    end
  end
end

versions.each do |lang, lang_versions|
  latest_version = lang_versions.values.reject { |v| v.fetch(:version).prerelease? }.sort_by { |v| v.fetch(:version) }.last
  latest_version[:latest] = true

  lang_versions = lang_versions.values.sort_by { |v| v.fetch(:version) }
  lang_versions.reverse!
  if lang == "lua"
    versions[lang] = lang_versions.take(3)
  else
    versions[lang] = lang_versions.take(2)
  end
end

content = URI.open("https://luarocks.github.io/luarocks/releases/").read
luarocks_version = content.scan(/luarocks-([\d\.]+)\.tar\.gz/).flatten.compact.uniq.sort_by { |version| Gem::Version.new(version) }.last

tags = {}
versions.each_value do |lang_versions|
  lang_versions.each do |version|
    distros.each do |distro, distro_versions|
      variants = [[]] + VARIANTS.fetch(version.fetch(:lang))

      variants.each do |variant|
        # LuaRocks is not compatible with Lua 5.0 (needs 5.1+).
        if version.fetch(:version_minor) == "5.0" && variant.include?("luarocks")
          next
        end

        distro_versions.each_with_index do |distro_data, distro_index|
          template = ERB.new(File.read("Dockerfile.erb"), trim_mode: "-").result_with_hash(version.merge({
            :distro => distro,
            :distro_tag => distro_data.fetch(:distro_tag),
            :variant => variant,
            :luarocks_version => luarocks_version,
          }))

          distro_version_name = (distro == "debian" || distro == "ubuntu") ? distro_data.fetch(:distro_version) : "#{distro}#{distro_data.fetch(:distro_version)}"
          variant_name = (variant.empty?) ? nil : variant.join("-")
          filename = File.join("#{version.fetch(:lang)}-#{version.fetch(:version_name)}", [variant_name, distro_version_name].compact.join("-"), "Dockerfile")
          FileUtils.mkdir_p(File.dirname(filename))
          File.open(filename, "w") { |f| f.write(template) }

          variant_tag = [version.fetch(:version_name), variant_name, distro_version_name].compact.join("-")
          variant_tags = [
            variant_tag,
            [version.fetch(:version_full), variant_name, distro_version_name].compact.join("-"),
          ]

          if version[:latest]
            variant_tags << [version.fetch(:version_major), variant_name, distro_version_name].compact.join("-")
          end

          if distro_data[:major_version_tag]
            variant_tags << [version.fetch(:version_full), variant_name, "#{distro}#{distro_data.fetch(:major_version_tag)}"].compact.join("-")
            variant_tags << [version.fetch(:version_major), variant_name, "#{distro}#{distro_data.fetch(:major_version_tag)}"].compact.join("-")
          end

          # Default distro tags
          if distro_data.fetch(:latest)
            variant_tags << [version.fetch(:version_name), variant_name, distro].compact.join("-")
            variant_tags << [version.fetch(:version_full), variant_name, distro].compact.join("-")
            if distro == "debian"
              variant_tags << [version.fetch(:version_name), variant_name].compact.join("-")
              variant_tags << [version.fetch(:version_full), variant_name].compact.join("-")
            end

            if version[:latest]
              variant_tags << [version.fetch(:version_major), variant_name, distro].compact.join("-")
              variant_tags << [variant_name, distro].compact.join("-")

              if distro == "debian"
                variant_tags << [version.fetch(:version_major), variant_name].compact.join("-")
                if variant_name
                  variant_tags << [variant_name].compact.join("-")
                else
                  variant_tags << "latest"
                end
              end
            end
          end

          variant_tags.uniq!
          variant_tags.sort!

          platforms = [
            "linux/amd64",
          ]

          if version.fetch(:lang) != "luajit" || version.fetch(:version) >= Gem::Version.new("2.1.0-beta0")
            platforms << "linux/arm64"
          end

          docker_image_tags = variant_tags.map do |tag|
            if version.fetch(:lang) == "luajit"
              [
                "#{github_luajit_image}:#{tag}",
                "#{docker_hub_luajit_image}:#{tag}",
              ]
            else
              [
                "#{github_lua_image}:#{tag}",
                "#{docker_hub_lua_image}:#{tag}",
              ]
            end
          end.flatten

          build_cache_tag = "#{github_build_cache_repo}:#{variant_tag}"

          lang = version.fetch(:lang)
          tags[lang] ||= []
          tags[lang] << {
            :variant => variant,
            :variant_tag => variant_tag,
            :variant_tags => variant_tags,
            :build_cache_tag => build_cache_tag,
            :docker_image_tags => docker_image_tags,
            :filename => filename,
            :platforms => platforms,
          }
        end
      end
    end
  end
end

template = ERB.new(File.read("docker-build.erb"), trim_mode: "-").result_with_hash({
  :tags => tags,
})
File.open("docker-build", "w") { |f| f.write(template) }
FileUtils.chmod(0755, "docker-build")

template = ERB.new(File.read("docker-push.erb"), trim_mode: "-").result_with_hash({
  :tags => tags,
})
File.open("docker-push", "w") { |f| f.write(template) }
FileUtils.chmod(0755, "docker-push")

template = ERB.new(File.read("test.erb"), trim_mode: "-").result_with_hash({
  :tags => tags,
})
File.open("test", "w") { |f| f.write(template) }
FileUtils.chmod(0755, "test")

template = ERB.new(File.read("README.md.erb"), trim_mode: "-").result_with_hash({
  :tags => tags,
})
File.open("README.md", "w") { |f| f.write(template) }

template = ERB.new(File.read("README.lua.md.erb"), trim_mode: "-").result_with_hash({
  :tags => tags,
})
File.open("README.lua.md", "w") { |f| f.write(template) }

template = ERB.new(File.read("README.luajit.md.erb"), trim_mode: "-").result_with_hash({
  :versions => versions,
})
File.open("README.luajit.md", "w") { |f| f.write(template) }
